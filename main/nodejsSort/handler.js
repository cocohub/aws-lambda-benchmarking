'use strict';

module.exports.hello = (event, context, callback) => {
    Array.prototype.quick_sort = function () {
    if (this.length < 2) { return this; }
 
    var pivot = this[Math.round(this.length / 2)];
 
    return this.filter(x => x <  pivot)
               .quick_sort()
               .concat(this.filter(x => x == pivot))
               .concat(this.filter(x => x >  pivot).quick_sort());
    };
    
    function int_arr(a, b) {
        return a - b;
    }
    
    var array = [443, 442, 133, 380, 994, 791, 246, 420, 413, 248, 647, 627, 941, 181, 53, 321, 260, 54, 361, 382, 256, 378, 979, 226, 94, 102, 969, 804, 641, 187, 173, 868, 97, 457, 957, 758, 685, 546, 349, 910, 589, 601, 653, 460, 22, 315, 106, 815, 471, 253, 672, 557, 897, 464, 911, 374, 935, 915, 854, 678, 105, 395, 298, 559, 274, 490, 192, 482, 881, 126, 104, 184, 101, 542, 247, 233, 663, 745, 222, 200, 687, 595, 871, 720, 262, 132, 35, 821, 713, 658, 781, 426, 939, 849, 110, 640, 959, 688, 777, 61, 333, 416, 67, 740, 859, 478, 209, 427, 948, 350, 662, 807, 788, 711, 291, 632, 307, 83, 13, 920, 79, 649, 785, 71, 69, 509, 917, 550, 495, 971, 864, 169, 100, 712, 308, 825, 165, 47, 242, 458, 564, 508, 376, 236, 27, 755, 343, 401, 171, 465, 631, 6, 273, 56, 197, 81, 706, 223, 780, 749, 768, 367, 450, 217, 765, 783, 57, 966, 733, 24, 955, 657, 916, 14, 525, 539, 320, 836, 742, 480, 44, 554, 89, 812, 949, 894, 764, 885, 524, 908, 784, 70, 152, 228, 170, 103, 705, 798, 770, 628, 787, 617, 660, 439, 555, 111, 429, 586, 177, 736, 561, 353, 674, 956, 730, 890, 982, 26, 980, 562, 659, 278, 701, 661, 845, 921, 379, 681, 237, 576, 234, 496, 986, 800, 987, 878, 87, 213, 831, 827, 811, 731, 587, 964, 195, 714, 318, 909, 972, 691, 929, 194, 276, 245, 92, 790, 700, 408, 266, 55, 535, 60, 622, 796, 545, 983, 503, 925, 164, 202, 310, 46, 227, 708, 65, 328, 182, 269, 507, 311, 400, 219, 73, 444, 493, 704, 381, 737, 629, 224, 93, 734, 454, 459, 833, 218, 339, 45, 145, 293, 954, 146, 884, 397, 491, 215, 656, 317, 738, 673, 17, 988, 679, 763, 196, 249, 360, 985, 973, 652, 86, 573, 84, 140, 893, 761, 286, 937, 842, 319, 435, 774, 366, 95, 880, 591, 832, 943, 951, 428, 823, 904, 746, 639, 59, 718, 584, 898, 241, 735, 862, 392, 968, 138, 579, 670, 816, 96, 760, 139, 960, 686, 277, 477, 188, 445, 168, 264, 295, 292, 204, 383, 696, 667, 166, 301, 931, 66, 128, 309, 377, 638, 534, 62, 709, 930, 609, 614, 650, 418, 522, 655, 992, 936, 369, 684, 666, 135, 848, 438, 351, 141, 757, 590, 876, 112, 36, 612, 648, 581, 773, 91, 892, 900, 329, 323, 855, 875, 441, 212, 990, 588, 399, 729, 626, 888, 43, 695, 417, 421, 856, 267, 906, 942, 703, 512, 747, 793, 422, 901, 305, 216, 52, 690, 841, 794, 867, 613, 944, 844, 529, 11, 419, 645, 485, 348, 566, 540, 592, 261, 646, 134, 500, 389, 620, 29, 313, 240, 775, 873, 548, 356, 304, 750, 265, 896, 907, 229, 475, 689, 466, 852, 710, 605, 723, 410, 403, 817, 407, 604, 596, 189, 371, 449, 820, 117, 810, 511, 753, 993, 863, 258, 819, 857, 607, 201, 75, 571, 436, 489, 801, 327, 174, 446, 634, 118, 991, 926, 721, 928, 618, 268, 31, 923, 76, 221, 924, 563, 409, 899, 940, 303, 872, 665, 282, 739, 121, 473, 232, 814, 835, 0, 440, 238, 699, 615, 136, 198, 203, 996, 675, 654, 137, 606, 513, 978, 636, 294, 624, 205, 63, 874, 358, 341, 860, 387, 172, 365, 953, 2, 433, 970, 415, 610, 314, 792, 470, 297, 244, 58, 858, 72, 728, 945, 834, 337, 913, 386, 148, 895, 637, 288, 541, 468, 463, 585, 756, 682, 42, 255, 481, 569, 322, 593, 455, 582, 877, 528, 642, 510, 336, 10, 551, 28, 623, 762, 840, 497, 345, 483, 950, 284, 879, 830, 789, 702, 664, 556, 159, 116, 207, 362, 975, 359, 447, 469, 487, 516, 759, 131, 989, 927, 30, 144, 48, 370, 538, 583, 808, 80, 565, 486, 813, 243, 597, 38, 919, 77, 430, 161, 393, 306, 726, 437, 183, 578, 677, 325, 344, 461, 805, 558, 575, 502, 64, 281, 676, 902, 150, 34, 744, 157, 946, 424, 467, 619, 809, 296, 621, 398, 90, 961, 312, 259, 190, 175, 560, 767, 185, 142, 515, 572, 432, 12, 299, 999, 123, 531, 697, 167, 526, 668, 574, 280, 869, 149, 922, 3, 39, 474, 99, 651, 802, 50, 405, 543, 532, 719, 965, 230, 977, 40, 82, 287, 472, 210, 498, 643, 603, 254, 302, 373, 974, 279, 33, 537, 129, 324, 838, 795, 715, 32, 1, 886, 839, 553, 411, 680, 122, 851, 912, 23, 124, 154, 521, 163, 779, 536, 51, 776, 331, 355, 633, 289, 451, 402, 384, 414, 530, 722, 406, 766, 771, 984, 476, 933, 938, 453, 958, 391, 616, 523, 125, 300, 786, 492, 769, 412, 186, 743, 517, 976, 332, 568, 4, 143, 754, 271, 599, 385, 549, 41, 952, 156, 316, 114, 822, 340, 199, 484, 423, 671, 644, 598, 518, 263, 19, 600, 231, 153, 115, 552, 967, 338, 162, 37, 635, 98, 824, 707, 151, 290, 120, 113, 488, 533, 434, 155, 404, 611, 107, 995, 15, 782, 504, 732, 180, 7, 283, 119, 828, 698, 74, 567, 431, 160, 602, 806, 275, 494, 211, 998, 191, 514, 452, 594, 352, 826, 818, 334, 903, 251, 829, 981, 887, 724, 669, 127, 178, 257, 547, 570, 220, 330, 725, 741, 214, 847, 78, 347, 16, 870, 693, 778, 130, 21, 630, 372, 865, 861, 962, 499, 932, 250, 934, 108, 88, 462, 608, 520, 772, 346, 9, 846, 963, 5, 914, 20, 225, 208, 85, 519, 527, 49, 850, 158, 239, 270, 335, 285, 716, 147, 799, 882, 625, 905, 357, 252, 363, 544, 479, 843, 506, 751, 891, 388, 394, 364, 456, 272, 109, 837, 18, 752, 717, 918, 883, 997, 505, 425, 375, 727, 396, 580, 8, 68, 179, 577, 947, 448, 176, 853, 692, 683, 25, 326, 193, 748, 501, 354, 368, 803, 889, 342, 797, 694, 206, 866, 390, 235];
    array = array.sort(int_arr);
    //console.log(array);
    
    //console.log(event);
    
    
  const response = {
      statusCode: 200,
      headers: {
        "x-custom-header" : "My Header Value"
      },
      body: JSON.stringify({ "message": array })
    };

  callback(null, response);

  // Use this code if you don't use the http event with the LAMBDA-PROXY integration
  // callback(null, { message: 'Go Serverless v1.0! Your function executed successfully!', event });
};
